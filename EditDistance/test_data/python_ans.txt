Python (programming language)


Python is a general-purpose, interpreted high-level programming language whose design philosophy emphasizes code readability. Its syntax is said to be clear and expressive. Python has a large and comprehensive standard library.
Python supports multiple programming paradigms, including object-oriented, imperative and functional programming styles. It features a fully dynamic type system and automatic memory management, similar to that of Scheme, Ruby, Perl, and Tcl. Like other dynamic languages, Python is often used as a scripting language, but is also used in a wide range of non-scripting contexts. Using third-party tools, Python code can be packaged into standalone executable programs. Python interpreters are available for many operating systems.
CPython, the reference implementation of Python, is free and open source software and has a community-based development model, as do nearly all of its alternative implementations. CPython is managed by the non-profit Python Software Foundation.


History

Python was conceived in the late 1980s and its implementation was started in December 1989 by Guido van Rossum at CWI in the Netherlands as a successor to the ABC language (itself inspired by SETL) capable of exception handling and interfacing with the Amoeba operating system. Van Rossum is Python's principal author, and his continuing central role in deciding the direction of Python is reflected in the title given to him by the Python community, Benevolent Dictator for Life (BDFL).
Python 2.0 was released on 16 October 2000, with many major new features including a full garbage collector and support for Unicode. However, the most important change was to the development process itself, with a shift to a more transparent and community-backed process.
Python 3.0 (also called Python 3000 or py3k), a major, backwards-incompatible release, was released on 3 December 2008 after a long period of testing. Many of its major features have been backported to the backwards-compatible Python 2.6 and 2.7.
Python has been awarded a TIOBE Programming Language of the Year award twice (2007, 2010), which is given to the language with the greatest growth in popularity over the course of a year, as measured by the TIOBE index.


Features
Python is a multi-paradigm programming language: object-oriented programming and structured programming are fully supported, and there are a number of language features which support functional programming and aspect-oriented programming (including by metaprogramming and by magic methods). Many other paradigms are supported using extensions, including design by contract and logic programming.
Python uses dynamic typing and a combination of reference counting and a cycle-detecting garbage collector for memory management. An important feature of Python is dynamic name resolution (late binding), which binds method and variable names during program execution.
The design of Python offers only limited support for functional programming in the Lisp tradition. The language has map(), reduce() and filter() functions, comprehensions for lists, dictionaries, and sets, as well as generator expressions. The standard library has two modules (itertools and functools) that implement functional tools borrowed from Haskell and Standard ML.


Programming philosophy
The core philosophy of the language is summarized by the document "PEP 20 (The Zen of Python)", which includes aphorisms such as:
Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Readability counts.
Rather than requiring all desired functionality to be built into the language's core, Python was designed to be highly extensible. Python can also be embedded in existing applications that need a programmable interface (Embedding and extending). This design of a small core language with a large standard library and an easily extensible interpreter was intended by Van Rossum from the very start because of his frustrations with ABC (which espoused the opposite mindset).
While offering choice in coding methodology, the Python philosophy rejects exuberant syntax, such as in Perl, in favor of a sparser, less-cluttered grammar. As Alex Martelli put it: "To describe something as clever is NOT considered a compliment in the Python culture." Python's philosophy rejects the Perl "there is more than one way to do it" approach to language design in favor of "there should be one—and preferably only one—obvious way to do it".
Python's developers strive to avoid premature optimization, and moreover, reject patches to non-critical parts of CPython which would offer a marginal increase in speed at the cost of clarity. When speed is important, Python programmers use PyPy, a just-in-time compiler, or move time-critical functions to extension modules written in "closer to the metal" languages such as C.


Community-led development
Python's development is conducted largely through the Python Enhancement Proposal (PEP) process. The PEP process is the primary mechanism for proposing major new features, for collecting community input on an issue, and for documenting the design decisions that have gone into Python. Outstanding PEPs are reviewed and commented upon by the Python community and by Van Rossum, the Python project's Benevolent Dictator for Life (leader / language architect).
Enhancement of the language goes along with development of the CPython reference implementation. The mailing list python-dev is the primary forum for discussion about the language's development; specific issues are discussed in the Roundup bug tracker maintained at python.org. Development takes place at the self-hosted hg.python.org.
CPython's public releases come in three types, distinguished by which part of the version number is incremented:
backwards-incompatible versions, where code is expected to break and must be manually ported. The first part of the version number is incremented. These releases happen infrequently—for example, version 3.0 was released 8 years after 2.0.
major or "feature" releases, which are largely compatible but introduce new features. The second part of the version number is incremented. These releases are scheduled to occur roughly every 18 months, and each major version is supported by bugfixes for several years after its release.
bugfix releases, which introduce no new features but fix bugs. The third and final part of the version number is incremented. These releases are made whenever a sufficient number of bugs have been fixed upstream since the last release, or roughly every 3 months. Security vulnerabilities are also patched in bugfix releases.
A number of alpha, beta, and release-candidates are also released as previews and for testing before the final release is made. Although there is a rough schedule for each release, this is often pushed back if the code is not ready. The development team monitor the state of the code by running the large unit test suite during development, and using the BuildBot continuous integration system.
The community of Python developers has also contributed over 25,000 software modules to the Python Package Index (called pypi), the official repository of third-party libraries for python.
The major academic conference on Python is named PyCon. There are special mentoring programmes like the Pyladies.


Name and neologisms
An important goal of the Python developers is making Python fun to use. This is reflected in the origin of the name (derived from the television series Monty Python's Flying Circus), in the common practice of using Monty Python references in example code, and in an occasionally playful approach to tutorials and reference materials. For example, the metasyntactic variables often used in Python literature are spam and eggs, instead of the traditional foo and bar.
A common neologism in the Python community is pythonic, which can have a wide range of meanings related to program style. To say that code is pythonic is to say that it uses Python idioms well, that it is natural or shows fluency in the language, that it conforms with Python's minimalist philosophy and emphasis on readability. In contrast, code that is difficult to understand or reads like a rough transcription from another programming language is called unpythonic.
Users and admirers of Python—most especially those considered knowledgeable or experienced—are often referred to as Pythonists, Pythonistas, and Pythoneers.
The prefix Py- is used to show that something is related to Python. Examples of the use of this prefix in names of Python applications or libraries include Pygame, a binding of SDL to Python (commonly used to create games); PyS60, an implementation for the Symbian S60 operating system; PyQt and PyGTK, which bind Qt and GTK, respectively, to Python; and PyPy, a Python implementation written in Python.


Usage

As of October 2012[update], Python ranks at position 8 in the TIOBE Programming Community Index. Large organizations that make use of Python include Google,Yahoo!,CERN,NASA,ILM, and ITA.
Python is used as a scripting language for web applications, e.g. via mod_wsgi for the Apache web server. With Web Server Gateway Interface, a standard API has been developed to facilitate these applications. Web application frameworks like Django, Pylons, Pyramid, TurboGears, web2py, Tornado, Flask and Zope support developers in the design and maintenance of complex applications. Pyjamas and IronPython can be used to develop the client-side of Ajax-based applications. SQLAlchemy can be used as data mapper to a relational database. Twisted is a framework to program communications between computers, and is used for example by Dropbox.
Libraries like NumPy, SciPy and Matplotlib allow Python to be used effectively in scientific computing. Sage is a mathematical software with a "notebook" programmable in python : its library covers many aspects of mathematics, including algebra, combinatorics, numerical mathematics, number theory, and calculus. PiCloud provides supercomputing processing capacity on the cloud, using a Python interface.
Python has been successfully embedded in a number of software products as a scripting language, including in finite element method software such as Abaqus, 3D animation packages such as Blender, Cinema 4D, Lightwave, Houdini, Maya, modo, MotionBuilder, Softimage, the visual effects compositor Nuke, and 2D imaging programs like GIMP, Inkscape, Scribus and Paint Shop Pro.GNU GDB uses Python as a pretty printer to show complex structures such as C++ containers. ESRI is now promoting Python as the best choice for writing scripts in ArcGIS. It has even been used in several video games, and has been adopted as first of the three available programming languages in Google App Engine, the other two being Java and Go.
Python has also been used in Artificial Intelligence tasks. Thanks to being a scripting language with module architecture, syntax simplicity and rich text processing tools, Python is often used for Natural language processing tasks.
For many operating systems, Python is a standard component; it ships with most Linux distributions, FreeBSD, NetBSD, OpenBSD and with OS X and can be used from the terminal. A number of Linux distributions use installers written in Python: Ubuntu uses the Ubiquity installer, while Red Hat Linux and Fedora use the Anaconda installer. Gentoo Linux uses Python in its package management system, Portage and the standard tool to access it, emerge. Pardus uses it for administration and during system boot.
Python has also seen extensive use in the information security industry, including exploit development.
Most of the Sugar software for the One Laptop per Child XO, now developed at Sugar Labs, is written in Python.
The Raspberry Pi single-board computer project has adopted Python as its principal user programming language.


Syntax and semantics

Python is intended to be a highly readable language. It is designed to have an uncluttered visual layout, frequently using English keywords where other languages use punctuation. Programmers using Python and similar scripting languages are usually more productive than those using C, C++ and Java. Furthermore Python has a smaller number of syntactic exceptions and special cases than C or Pascal.
For a detailed description of the differences between 2.x and 3.x versions, see History of Python.
The simplicity of Python is demonstrated by its version of the classic "Hello world" program:


Indentation
Python uses whitespace indentation, rather than curly braces or keywords, to delimit blocks; a feature also termed the off-side rule. An increase in indentation comes after certain statements; a decrease in indentation signifies the end of the current block. While some consider this significantly enhances readability, others have criticized it.


Statements and control flow
Python's statements include (among others):
The if statement, which conditionally executes a block of code, along with else and elif (a contraction of else-if).
The for statement, which iterates over an iterable object, capturing each element to a local variable for use by the attached block.
The while statement, which executes a block of code as long as its condition is true.
The try statement, which allows exceptions raised in its attached code block to be caught and handled by except clauses; it also ensures that clean-up code in a finally block will always be run regardless of how the block exits.
The class statement, which executes a block of code and attaches its local namespace to a class, for use in object-oriented programming.
The def statement, which defines a function or method.
The with statement (from Python 2.5), which encloses a code block within a context manager (for example, acquiring a lock before the block of code is run, and releasing the lock afterwards).
The pass statement, which serves as a NOP. It is syntactically needed to create an empty code block.
The assert statement, used during debugging to check for conditions that ought to apply.
The yield statement, which returns a value from a generator function. (From Python 2.5, yield is also an operator. This form is used to implement coroutines – see below.)
The import statement, which is used to import modules whose functions or variables can be used in the current program.
Python does not support tail-call optimization nor first-class continuations, and, according to Guido van Rossum, it never will. However, better support for coroutine-like functionality is provided in 2.5, by extending Python's generators. Prior to 2.5, generators were lazy iterators; information was passed unidirectionally out of the generator. As of Python 2.5, it is possible to pass information back into a generator function, and as of Python 3.3, the information can be passed through multiple stack levels.


Expressions
Python expressions are similar to languages such as C and Java.
In Python 2, the / operator on integers does integer division; it truncates the result to an integer. Floating-point division on integers can be achieved by converting one of the integers to a float (e.g. float(x) / y). In Python 3, the result of / is always a floating-point value. This behaviour can be enabled in Python 2.2+ using from __future__ import division. In both Python 2.2+ and Python 3, // can be used to do integer division.
In Python, == compares by value, in contrast to Java, where it compares by reference. (Value comparisons in Java use the equals() method.) Python's is operator may be used to compare object identities (comparison by reference). Comparisons may be chained, for example a <= b <= c.
Python uses the words and, or, not for its boolean operators rather than the symbolic &&, ||, ! used in Java and C.
Python has a type of expression termed a list comprehension. Python 2.4 extended list comprehensions into a more general expression termed a generator expression.
Anonymous functions are implemented using lambda expressions; however, these are limited in that the body can only be a single expression.
Conditional expressions in Python are written as x if c else y (different in order of operands from the ?: operator common to many other languages).
Python makes a distinction between lists and tuples. Lists are written as [1, 2, 3], are mutable, and cannot be used as the keys of dictionaries (dictionary keys must be immutable in Python). Tuples are written as (1, 2, 3), are immutable and thus can be used as the keys of dictionaries, provided all elements of the tuple are immutable. The parentheses around the tuple are optional in some contexts. Tuples can appear on the left side of an equal sign; hence a statement like x, y = y, x can be used to swap two variables.
Python 2 has a "string format" operator %. This functions analogous to printf format strings in C, e.g. "foo=%s bar=%d" % ("blah", 2) evaluates to "foo=blah bar=2". In Python 3, this was supplemented by the format() method of the str class, e.g. "foo={0} bar={1}".format("blah", 2).
Python has various kinds of string literals:
Strings delimited by single or double quotation marks. Unlike in Unix shells, Perl and Perl-influenced languages, single quotation marks and double quotation marks function similarly. Both kinds of string use the backslash (\) as an escape character and there is no implicit string interpolation such as "$foo".
Triple-quoted strings, which begin and end with a series of three single or double quotation marks. They may span multiple lines and function like here documents in shells, Perl and Ruby.
Raw string varieties, denoted by prefixing the string literal with an r. No escape sequences are interpreted; hence raw strings are useful where literal backslashes are common, such as regular expressions and Windows-style paths. Compare "@-quoting" in C#.

Python has index and slice expressions on lists, denoted as a[key], a[start:stop] or a[start:stop:step]. Indexes are zero-based, and negative indexes are relative to the end. Slices take elements from the start index up to, but not including, the stop index. The third slice parameter, called step or stride, allows elements to be skipped and reversed. Slice indexes may be omitted, for example a[:] returns a copy of the entire list. Each element of a slice is a shallow copy.
In Python, a distinction between expressions and statements is rigidly enforced, in contrast to languages such as Common Lisp, Scheme, or Ruby. This leads to some duplication of functionality, e.g.
list comprehensions vs. for-loops
conditional expressions vs. if blocks
The eval() vs. exec() built-in functions (in Python 2, exec is a statement); the former is for expressions, the latter is for statements.
Statements cannot be a part of an expression and so list and other comprehensions or lambda expressions, all being expressions, cannot contain statements. A particular case of this is that an assignment statement such as a = 1 cannot form part of the conditional expression of a conditional statement. This has the advantage of avoiding a classic C error of mistaking an assignment operator = for an equality operator == in conditions: if (c = 1) { ... } is valid C code but if c = 1: ... causes a syntax error in Python.


Methods
Methods on objects are functions attached to the object's class; the syntax instance.method(argument) is, for normal methods and functions, syntactic sugar for Class.method(instance, argument). Python methods have an explicit self parameter to access instance data, in contrast to the implicit self in some other object-oriented programming languages (for example, Java, C++ or Ruby).


Typing
Python uses duck typing and has typed objects but untyped variable names. Type constraints are not checked at compile time; rather, operations on an object may fail, signifying that the given object is not of a suitable type. Despite being dynamically typed, Python is strongly typed, forbidding operations that are not well-defined (for example, adding a number to a string) rather than silently attempting to make sense of them.
Python allows programmers to define their own types using classes, which are most often used for object-oriented programming. New instances of classes are constructed by calling the class (for example, SpamClass() or EggsClass()), and the classes themselves are instances of the metaclass type (itself an instance of itself), allowing metaprogramming and reflection.
Prior to version 3.0, Python had two kinds of classes: "old-style" and "new-style". Old-style classes were eliminated in Python 3.0, making all classes new-style. In versions between 2.2 and 3.0, both kinds of classes could be used. The syntax of both styles is the same, the difference being whether the class object is inherited from, directly or indirectly (all new-style classes inherit from object and are instances of type).
Here is a summary of Python 3's built-in types:


Mathematics
In contrast with some programming languages, integer division is defined to round towards minus infinity. Therefore 7 // 3 is 2, but (−7) // 3 is −3. This is uniform and consistent: for instance, it means that the equation (a+b) // b == a // b + 1 is always true, whereas in languages such as C, (-6+7) / 7 == -6 / 7. It also means that the equation b * (a // b) + a % b == a is valid for both positive and negative values of a. However, maintaining the validity of this equation means that while the result of a % b is, as expected, in the half-open interval [0,b), where b is a positive integer, it has to lie in the interval (b,0] when b is negative.
Python provides a round function for rounding floats to integers. Versions before 3 use round-away-from-zero: round(0.5) is 1.0, round(-0.5) is −1.0. Python 3 uses round-to-even: round(1.5) is 2.0, round(2.5) is 2.0. The Decimal type/class in module decimal (since version 2.4) provides exact numerical representation and several rounding modes.
Python allows boolean expressions with multiple equality relations in a manner that is consistent with general usage in mathematics. For example, the expression a < b < c tests whether a is less than b and b is less than c. C-derived languages interpret this expression differently: in C, the expression would first evaluate a < b, resulting in 0 or 1, and that result would then be compared with c.[page needed]


Implementations


Interpreters
The main Python implementation, named CPython, is written in C meeting the C89 standard. It compiles Python programs into intermediate bytecode, which is executed by the virtual machine. CPython is distributed with a large standard library written in a mixture of C and Python. It is available in versions for many platforms, including Microsoft Windows and most modern Unix-like systems. CPython was intended from almost its very conception to be cross-platform.
PyPy is a fast, compliant interpreter of Python 2.7. Its just-in-time compiler brings a significant speed improvement over CPython. A version taking advantage of multi-core processors using software transactional memory is in the works.
Stackless Python is a significant fork of CPython that implements microthreads; it does not use the C memory stack, thus allowing massively concurrent programs. PyPy also has a stackless version.
Other just-in-time compilers have been developed in the past, but are now unsupported:
Google started a project called Unladen Swallow in 2009 with the aims of increasing the speed of the Python interpreter by 5 times by using the LLVM and improving its multithreading ability to scale to thousands of cores. Later the project lost Google's backing and its main developers. As of 1 February 2012 (2012 -02-01)[update], the project hasn't achieved its goal; the modified interpreter is only about 2 times faster.[citation needed]
Psyco is a specialising just in time compiler that integrates with CPython and transforms bytecode to machine code at runtime. The produced code is specialised for certain data types and is faster than standard Python code.


Cross-compilers
There are several compilers to high-level object languages, with either unrestricted Python, a restricted subset of Python, or a language similar to Python as the source language:
Jython compiles into Java byte code, which can then be executed by every Java Virtual Machine implementation. This also enables the use of Java class library functions from the Python program.
IronPython follows a similar approach in order to run Python programs on the .NET Common Language Runtime.
The RPython language can be compiled to C, Java bytecode or Common Intermediate Language, and is used to build the PyPy interpreter of Python;
Pyjamas compiles Python to JavaScript;
Shed Skin compiles Python to C++;
Cython and Pyrex compile to C.
Nuitka is an ahead of time compiler for Python 2. It compiles the python code to C++0x that utilizes libpython. The C++ code is later compiled with gcc to machine code. Nuitka claims to be feature complete and fully compatible to CPython, but support for Python 3 is limited 
mypy is a Python variant where dynamic and static typing can be mixed. As of Dec 2012, it compiles to CPython. Cross-compiling to C is in the works.


Platform-specific implementations
In 2005 Nokia released a Python interpreter for the Series 60 mobile phones called PyS60. It includes many of the modules from the CPython implementations and some additional modules for integration with the Symbian operating system. This project has been kept up to date to run on all variants of the S60 platform and there are several third party modules available. The Nokia N900 also supports Python with GTK widget libraries, with the feature that programs can be both written and run on the device itself. There is also a Python interpreter for Windows CE devices (including Pocket PC). It is called PythonCE. There are additional tools available for easy application and GUI development.
The PyMite virtual machine began in 2000 and made its first public appearance at PyCon 2003. PyMite was folded into Python-on-a-Chip in 2009. Python-on-a-Chip (p14p) is a project to develop a reduced Python virtual machine (codenamed PyMite) that runs a significant subset of the Python language on microcontrollers without an OS in as little as 4KB of RAM.
Around 2004,[citation needed] the Pyastra project created a specialized translator and assembler that targets resource-constrained microcontrollers.
Python is available on Android as an option as part of the Android Scripting Environment. or via the Python-for-android project, which produce native apk for android.
Python is available on iOS through the Kivy-ios project, allowing to build cross-platform OpenGL ES 2.0 Python applications.


Python shells and integrated development environments
Most Python implementations (including CPython) can function as a command line interpreter, for which the user enters statements sequentially and receives the results immediately. In short, Python acts as a shell.
Other shells add capabilities beyond those in the basic interpreter, including IDLE and IPython. While generally following the visual style of the Python shell, they implement features like auto-completion, retention of session state, and syntax highlighting.
In addition to standard desktop Python IDEs (integrated development environments), there are also browser-based IDEs, Sage, (intended for developing science and math-related Python programs), and a hosted IDE, pythonAnywhere.


Libraries


Python standard library
Python has a large standard library, commonly cited as one of Python's greatest strengths, providing tools suited to many tasks. This is deliberate and has been described as a "batteries included" Python philosophy. For internet-facing applications, a large number of standard formats and protocols (such as MIME and HTTP) are supported. Modules for creating graphical user interfaces, connecting to relational databases, arithmetic with arbitrary precision decimals, manipulating regular expressions, and doing unit testing are also included. For software testing, the standard library provides the unittest and doctest modules.
Some parts of the standard library are covered by specifications (for example, the WSGI implementation wsgiref follows PEP 333), but the majority of the modules are not. They are specified by their code, internal documentation, and test suite (if supplied). However, because most of the standard library is cross-platform Python code, there are only a few modules that must be altered or completely rewritten by alternative implementations.
The standard library is not essential to run Python or embed Python within an application. Blender 2.49 for instance omits most of the standard library.


Third party libraries
The Python Package Index, which is the official repository of third-party software for Python, contains over 25,000 "packages" covering a wide range of functionality, including :
graphical user interface, web framework, multimedia, databases, networking and communications
test frameworks, documentation tools, system administration
scientific computing, text processing, image processing


Embedding and extending Python
Python can be embedded in C programs, and it can be extended by modules written in C, C++, or Cython.

Embedding Python adds scripting capabilities to existing applications. If the application is written in C (or a related language), the statement

 #include <Python.h>

makes the Python API available. After compilation, the code must be linked with libpython.
Extending Python means providing Python with additional functionality coded in C, C++, or Cython. Cython is a compiled language, developed specifically to support writing Python extension modules. It is a superset of Python with syntax extensions for C and C++.
Extensions written in C or C++ are compiled and linked as a shared library, say 'extensions.so'. This library can then be imported as a module into Python,

 import extensions

To make this work, all function arguments must be valid Python types. This is usually achieved by Python-specific wrappers. Exporting entire classes from C++ is a relatively difficult exercise. Writing the necessary wrappers directly in C or C++ results in rather lengthy and tedious bookkeeping code. Therefore, different tool suites have been developed. SWIG (Simplified Wrapper and Interface Generator) supports Python among many other scripting languages. In contrast, the Boost library has a module Boost.Python to specifically enable interoperability between C++ and Python; it is used in conjuction with the Py++ code generator.


Deployment of modules
Two different Python programs may need 2 different versions of the same module or extension. To allow this, the extensions can be installed in virtual python environments, using "virtualenv". Alternatively, self-contained executables can be built from Python source, using third-party tools and/or windows installers.


Influence on other languages
Python's design and philosophy have influenced several programming languages, including:
Boo uses indentation, a similar syntax, and a similar object model. However, Boo uses static typing and is closely integrated with the .NET Framework.
Cobra uses indentation and a similar syntax. Cobra's "Acknowledgements" document lists Python first among languages that influenced it. However, Cobra directly supports design-by-contract, unit tests and optional static typing.
ECMAScript borrowed iterators, generators, and list comprehensions from Python.
Go is described as incorporating the "development speed of working in a dynamic language like Python".
Groovy was motivated by the desire to bring the Python design philosophy to Java.
OCaml has an optional syntax, called twt (The Whitespace Thing), inspired by Python and Haskell.
Ruby's creator, Yukihiro Matsumoto, has said: "I wanted a scripting language that was more powerful than Perl, and more object-oriented than Python. That's why I decided to design my own language."
Alore, a new language with optional typing with Python syntax. (Development in hiatus)
Mypy (in development), derived from Alore, but mypy will be mostly compatible with Python to make it easier to adopt.
Python's development practices have also been emulated by other languages. The practice of requiring a document describing the rationale for, and issues surrounding, a change to the language (in Python's case, a PEP) is also used in Tcl and Erlang because of Python's influence.


See also

Comparison of Python integrated development environments
Comparison of command shells
Comparison of programming languages
List of programming languages


References


Further reading


External links
[Image] Learning materials related to Python Programming at Wikiversity
[Image] Media related to Python (programming language) at Wikimedia Commons
Official website
comp.lang.python newsgroup (Google Groups archive) / python-list mailing list
Python at the Open Directory Project
